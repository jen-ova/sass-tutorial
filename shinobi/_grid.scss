@use "sass:math";

$grid-columns: 12;
$grid-gaps: (
    "0": 0,
    "1": 10px,
    "2": 20px,
    "3": 30px,
);

$layout-values: flex-start, flex-end, center, space-between, space-around;

// base layout classes
.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    // incorporates border and padding into total width
    box-sizing: border-box;
}

.row {
    display: flex;
    flex-flow: row wrap;
}

// grid gaps
@each $key, $val in $grid-gaps {
    // apply to all flex items
    .gap-#{$key} > * {
        padding: $val;
    }
    // remove left right padding to make flush to container
    .gap-#{$key} {
        margin-left: -$val;
        margin-right: -$val;
    }
}

// justify content classes
@each $val in $layout-values {
    .justify-#{$val} {
        justify-content: $val;
    }
}

// col classes
// taken from breakpoints mixins
@include xs {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xs {
            box-sizing: border-box;
            flex-grow: 0;
            // $i times 100% divided by 12 ie. grid-columns, each loop adds a column in width
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include sm {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-sm {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include md {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-md {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include lg {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-lg {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xl {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xl {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}